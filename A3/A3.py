{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"A3.py","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"L657DEL9tiIV","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1627261086428,"user_tz":240,"elapsed":712,"user":{"displayName":"Steven Fernandez","photoUrl":"","userId":"14061978284071080019"}},"outputId":"69d85754-3000-4c86-dd7c-64c8568aea4a"},"source":["#Ava Perrone    Jonathan Masino   Steven Fernandez\n","#perronea2020   jmasino2019       stevenfernan2020\n","#CAP 4630   Dr. Marques\n","#A3: TSP using ACO\n","#July 25, 2021\n","\"\"\"\n","        self.index = index\n","        self.dist += city_distance(self.location, cityList[index])\n","        self.location = cityList[index]        \n","        self.visitedPlaces.append(self.index, self.dist, self.location)\n","\"\"\"\n","\n","import numpy as np, random, time, copy, itertools\n","import math\n","\n","population = []\n","\n","CITY_COUNT = 25\n","RANDOM_ATTRACTION_FACTOR = 0.3\n","ALPHA = 4\n","BETA = 7\n","NUMBER_OF_PEOPLE_FACTOR = 0.5\n","TOTAL_ITERATIONS = 1000\n","EVAPORTATION_RATE = 0.4\n","numPeople = 0\n","\n","cityList = [\n","    ['Bridgewater',162,147],\n","    ['Somerville',127,13],\n","    ['Bedminster',80,172],\n","    ['Warren',48,121],\n","    ['Watchung',93,54],\n","    ['Far Hills',40,43],\n","    ['Piscataway',88,140],\n","    ['South Plainfield',1,123],\n","    ['Green Brook',72,191],\n","    ['Branchburg',130,13],\n","    ['Manville',112,112],\n","    ['Lamington',77,15],\n","    ['Raritan',96,5],\n","    ['Bound Brook',151,196],\n","    ['Middlesex',103,55],\n","    ['Franklin',39,6],\n","    ['New Brunswick',131,73],\n","    ['Metuchen',43,127],\n","    ['Edison',54,191],\n","    ['Millstone',35,61],\n","    ['Dunellen',199,132],\n","    ['North Plainfield',87,33],\n","    ['Plainfield',61,177],\n","    ['Scotch Plains',116,33],\n","    ['Somerdale',69,42]\n","]\n","class Person(object):\n","    def __init__(self):\n","        index = random.randrange(0, CITY_COUNT)             #random number 0 to 24\n","        self.visitedPlaces = []\n","        self.index = index\n","        self.location = cityList[index]\n","        self.dist = 0\n","        self.possibleCities = []\n","        self.visitedPlaces.append(self.location)    #add to places visited\n","        \n","    def visit_city(self, pheremoneTrails):\n","        rand = random.randrange(0, 100)\n","        if (rand < 10):\n","            self.visit_random_city()\n","        else:\n","            possibleIndicies, possibleProbabilities, possibleCities = self.visit_probabilistic_attraction(pheremoneTrails, CITY_COUNT, ALPHA, BETA)\n","            nextCity = self.roulette_wheel_selection(possibleIndicies, possibleProbabilities, possibleCitiesCount)\n","            y = 0\n","            if 0 == nextCity:\n","                self.visit_random_city()\n","            else:\n","                for x in self.possibleCities:\n","                    if x == nextCity[0]:\n","                        index = y\n","                        break\n","                    y += 1\n","                    distance = city_distance(self.location, cityList[self.index])\n","                    self.dist += distance\n","                    self.visitedPlaces.append(nextCity[0])\n","    def visit_random_city(self):\n","        z = -1\n","        y = 0\n","        possibleCitiesCount = 0\n","        for x in (cityList):\n","            y = 0\n","            z+= 1\n","            while y < len(self.visitedPlaces):\n","                if x != self.visitedPlaces[y]:\n","                    self.possibleCities.append(cityList[z])\n","                y += 1\n","                possibleCitiesCount += 1\n","        index = random.randrange(0, (possibleCitiesCount))\n","        self.index = index\n","        distance = city_distance(self.location, self.possibleCities[index])\n","        self.dist += distance\n","        self.location = self.possibleCities[index]  \n","        self.visitedPlaces.append(self.location)\n","    \n","    def visit_probabilistic_attraction(self, pheremoneTrails, cityCount, alpha, beta):\n","        currentCity = self.index\n","        allCities = cityList\n","        x = 0\n","        possibleCities = []\n","        possibleIndicies = []\n","        possibleProbabilities = []\n","        totalProbabilities = 0\n","        y = 0\n","        z = 0\n","        y = 0\n","        possibleCitiesCount = 0\n","        for x in (cityList):\n","            y = 0\n","            while y < len(self.visitedPlaces):\n","                if x != self.visitedPlaces[y]:\n","                    self.possibleCities.append(cityList[z])\n","                    possibleCitiesCount += 1\n","                    break\n","                y += 1\n","            z+= 1\n","        x = -1\n","        while x < possibleCitiesCount:\n","            possibleIndicies.append(self.possibleCities[x])\n","            phereOnPath = math.pow(pheremoneTrails[self.index][x], alpha)\n","            if cityDistances[self.index][x] != 0:\n","                heuristicForPath = math.pow((1/cityDistances[self.index][x]), beta)\n","            else:\n","                heuristicForPath = 1\n","            probability= phereOnPath * heuristicForPath\n","            possibleProbabilities.append(probability)\n","            totalProbabilities += probability\n","            x += 1\n","        for probability in possibleProbabilities:\n","            probability = (probability / totalProbabilities) \n","        return (possibleIndicies, possibleProbabilities, possibleCitiesCount)\n"," \n","    def roulette_wheel_selection(self, possibleIndicies, possibleProbabilities, possibleCitiesCount):\n","        slices = []\n","        total = 0\n","        for i in range(0, possibleCitiesCount):\n","            slices.append([possibleIndicies[i], total, total+(possibleProbabilities[i])])\n","            total += possibleProbabilities[i]\n","        spin = random.randrange(0,1)\n","        result = 0\n","        for slice in slices:\n","            if slice[1] < spin and spin <= slice[2]:\n","                result = slice \n","        return result\n","    \n","    def get_distance_traveled(self):\n","        totalDistance = self.dist\n","        if(totalDistance == 0):\n","            totalDistance = 1\n","        return totalDistance\n","\n","\n","\n","def city_distance(city1, city2):\n","    '''calculate the distance between two cities'''\n","    xDis = abs(city1[1] - city2[1])\n","    yDis = abs(city1[2] - city2[2])\n","    distance = np.sqrt((xDis * 2) + (yDis * 2))\n","    return distance\n","\n","def matrix():\n","    distances = []\n","    temp = []\n","    for x in range(0, 25):\n","        for y in range(0, 25):\n","            dist = city_distance(cityList[y], cityList[x])\n","            newDist = round(dist, 2)\n","            temp.append(newDist)\n","        distances.append(temp)\n","        temp = []\n","    return distances\n","\n","def setup_people(cityCount, numPeopleFactor, numPeople):\n","    numPeople = round(cityCount*numPeopleFactor)\n","    for i in range(0,numPeople):\n","        population.append(Person())\n","    return population\n","\n","def setup_pheremones(cityCount):\n","    pheremoneTrails = []\n","    temp = []\n","    for x in range(0, 25):\n","        for y in range(0, 25):\n","            temp.append(1)\n","        pheremoneTrails.append(temp)\n","        temp = []\n","    return pheremoneTrails\n","\n","\n","def update_pheremones(evapRate, pheremoneTrails, cityCount):\n","    for x in range(0, cityCount):\n","        for y in range(0,cityCount):\n","            pheremoneTrails[x][y] = pheremoneTrails[x][y]*evapRate\n","            for person in population:\n","                pheremoneTrails[x][y] += (1 / person.get_distance_traveled())\n","        \n","def get_best(pPop, prevBestPerson):\n","    bestPerson = prevBestPerson\n","    for person in pPop:\n","        distanceTraveled = person.get_distance_traveled()\n","        if (distanceTraveled < prevBestPerson):\n","            best = person\n","    return bestPerson\n","def solve(totalIterations, evapRate, numPeopleFactor, cityCount, possibleCitiesCount):\n","    pheremoneTrails = setup_pheremones(cityCount)\n","    best = 0\n","    for i in range(0,totalIterations):\n","        population = setup_people(cityCount, numPeopleFactor, numPeople)\n","        for r in range(0,cityCount-1):\n","            move_ppl(numPeople, population, pheremoneTrails, possibleCitiesCount)\n","        update_pheremones(evapRate, pheremoneTrails, cityCount)\n","        best = get_best(population, best)\n","    print(best)\n","def move_ppl(numPeople, population, pheremoneTrails, possibleCitiesCount):\n","    possibleCitiesCount += (-1)\n","    for x in population:\n","        possibleIndicies, possibleProbabilities = x.visit_probabilistic_attraction(pheremoneTrails, CITY_COUNT, x, ALPHA, BETA)\n","        result = x.roulette_wheel_selection(possibleIndicies, possibleProbabilities, possibleCitiesCount)\n","    print(result)\n","\n","possibleCitiesCount = CITY_COUNT\n","prevBest = \"\"\n","cityDistances = matrix()\n","population = setup_people(CITY_COUNT, NUMBER_OF_PEOPLE_FACTOR, numPeople)\n","pheremoneTrails = setup_pheremones(CITY_COUNT)\n","\n","for x in population:\n","    print(x.visitedPlaces)\n","print(\"finished set up of pheremones & people\")\n","#solve(TOTAL_ITERATIONS, EVAPORTATION_RATE, NUMBER_OF_PEOPLE_FACTOR, CITY_COUNT, possibleCitiesCount)\n","#move_ppl(numPeople, population, pheremoneTrails, possibleCitiesCount) ##debugging\n","y = 0\n","for x in population:\n","    #while y < 25:\n","        x.visit_city(pheremoneTrails)\n","for x in population:\n","    #while y < 25:\n","        x.visit_city(pheremoneTrails)\n","\n","\n","popLength = 0\n","for x in population:\n","    print(x.visitedPlaces)\n","    popLength += 1\n","    \n","print(\"finished moving people\")\n","#get_best(popLength, population[0])\n","#update_pheremones(EVAPORTATION_RATE, phereTrail, CITY_COUNT)\n","\n","     \n","        \n","        \n","        \n","        \n","        \n","        \n","        \n","        \n","        \n","        "],"execution_count":null,"outputs":[{"output_type":"stream","text":["[['Metuchen', 43, 127]]\n","[['Bridgewater', 162, 147]]\n","[['South Plainfield', 1, 123]]\n","[['Edison', 54, 191]]\n","[['Warren', 48, 121]]\n","[['Franklin', 39, 6]]\n","[['Plainfield', 61, 177]]\n","[['Somerdale', 69, 42]]\n","[['Lamington', 77, 15]]\n","[['Raritan', 96, 5]]\n","[['South Plainfield', 1, 123]]\n","[['Plainfield', 61, 177]]\n","finished set up of pheremones & people\n","[['Metuchen', 43, 127], ['Bridgewater', 162, 147], ['Warren', 48, 121]]\n","[['Bridgewater', 162, 147], ['Dunellen', 199, 132], ['Bound Brook', 151, 196]]\n","[['South Plainfield', 1, 123], ['Metuchen', 43, 127], ['Branchburg', 130, 13]]\n","[['Edison', 54, 191], ['Scotch Plains', 116, 33], ['Bridgewater', 162, 147]]\n","[['Warren', 48, 121], ['Metuchen', 43, 127], ['Middlesex', 103, 55]]\n","[['Franklin', 39, 6], ['Raritan', 96, 5], ['Somerdale', 69, 42]]\n","[['Plainfield', 61, 177], ['North Plainfield', 87, 33], ['Middlesex', 103, 55]]\n","[['Somerdale', 69, 42], ['Bedminster', 80, 172], ['Scotch Plains', 116, 33]]\n","[['Lamington', 77, 15], ['Watchung', 93, 54], ['Dunellen', 199, 132]]\n","[['Raritan', 96, 5], ['Far Hills', 40, 43], ['New Brunswick', 131, 73]]\n","[['South Plainfield', 1, 123], ['Far Hills', 40, 43], ['Millstone', 35, 61]]\n","[['Plainfield', 61, 177], ['Franklin', 39, 6], ['Edison', 54, 191]]\n","finished moving people\n"],"name":"stdout"}]},{"cell_type":"markdown","metadata":{"id":"owV_j-L7gkch"},"source":["# **REPORT**\n","Assignment #3: TSA using ACO COP4630\n","\n","Jonathan Masino(Architect), Ava Perrone(Developer), Steven Fernandez(Reporter)\n","\n","Overview\n","We formed our group days after A1 was released, we have taken some classes in the past so it was easy for us to assign roles based on that. We read the book and watch the different videos professor Marques has posted on YouTube where he explains each chapter and the code related to them. Our professor videos showing different hints for A3 were very helpful and gave us an idea on how to start this assignment. \n","\t\n","After watching the video explanation for this assignment we started working with was given like the starting code and multiple hints in the video. It took us various attempts to find the proper solution for this assignment but we succeeded. These are some screenshots showing the final result of our A3. \n","\n","Documentation of the solution \n","- How were the cities and distances represented (as a data structure)?\n","Ans: Cities and their respective distances were represented in our program as a list.\n","- How did you encode the solution space?\n","Ans: \n","- How did you handle the creation of the initial population? \n","Ans:\n","How did you compute the fitness score?\n","Ans:\n","Which parent selection strategy did you use? Why?\n","Ans:\n","Which crossover strategy did you try? Which one worked out best?\n","Ans:\n","Which mutation strategy did you try? Which one worked out best?\n","Ans:\n","Which strategy did you use for populating the next generation? Why? \n","Ans:\n","Which stopping condition did you use? Why?\n","Ans:\n","What other parameters, design choices, initialization and configuration steps are relevant to your design and implementation?\n","Ans:\n","Which (simple) experiments have you run to observe the impact of different design decisions and parameter values? Post results and your comments.\n","Ans:\n","\n","Demo\n","\n","\n","\n","Code\n","\n","cityList = [\n","    ['Bridgewater',162,147],\n","    ['Somerville',127,13],\n","    ['Bedminster',80,172],\n","    ['Warren',48,121],\n","    ['Watchung',93,54],\n","    ['Far Hills',40,43],\n","    ['Piscataway',88,140],\n","    ['South Plainfield',1,123],\n","    ['Green Brook',72,191],\n","    ['Branchburg',130,13],\n","    ['Manville',112,112],\n","    ['Lamington',77,15],\n","    ['Raritan',96,5],\n","    ['Bound Brook',151,196],\n","    ['Middlesex',103,55],\n","    ['Franklin',39,6],\n","    ['New Brunswick',131,73],\n","    ['Metuchen',43,127],\n","    ['Edison',54,191],\n","    ['Millstone',35,61],\n","    ['Dunellen',199,132],\n","    ['North Plainfield',87,33],\n","    ['Plainfield',61,177],\n","    ['Scotch Plains',116,33]\n","]\n","\n"]}]}